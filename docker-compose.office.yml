version: '3.8'

services:
  evolution_api_v2:
    image: atendai/evolution-api:v2.2.0
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - evolution_v2_instances:/evolution/instances
    networks:
      - local_network
    environment:
      # Server Configuration
      - SERVER_URL=http://localhost:8080
      
      # Seguridad
      - AUTHENTICATION_API_KEY=6f452646de12e76ae1625de209d77862
      
      # Logging
      - LOG_LEVEL=DEBUG
      - LOG_COLOR=true
      
      # Database (Corregido para usar configuración interna Docker)
      - DATABASE_ENABLED=true
      - DATABASE_PROVIDER=postgresql
      - DATABASE_HOST=postgres  # Nombre del servicio
      - DATABASE_PORT=5432      # Puerto interno del contenedor
      - DATABASE_NAME=postgres
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=localpassword
      - DATABASE_CONNECTION_URI=postgresql://postgres:localpassword@postgres:5432/postgres?client_encoding=utf8  # Codificación forzada
      
      # RabbitMQ
      - RABBITMQ_ENABLED=true
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672/  # Usar credenciales por defecto
      
      # Integraciones
      - WEBHOOK_GLOBAL_ENABLED=true
      - TYPEBOT_ENABLED=true
      
      # Redis
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379/6
      
      # MinIO/S3
      - S3_ENDPOINT=http://minio:9000
      - S3_ENDPOINT=minio
      - S3_PORT=9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET=local-bucket
      - S3_USE_SSL=false
    ports:
      - "8080:8080"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M

  minio:
    image: minio/minio:latest
    hostname: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - local_network

  redis:
    image: redis:alpine
    hostname: redis
    volumes:
      - redis_data:/data
    networks:
      - local_network

  postgres:
    image: postgres:13
    ports:
      - "5432:5432"
    hostname: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: localpassword
      POSTGRES_DB: postgres
      LC_COLLATE: 'C.UTF-8'  # Forzar collate UTF-8
      LC_CTYPE: 'C.UTF-8'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      #- ./sqlpostgres:/docker-entrypoint-initdb.d  # Asegurar que los scripts SQL usen UTF-8
    networks:
      - local_network

  pgadmin:
    image: dpage/pgadmin4:latest
    hostname: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com    # Correo de acceso
      PGADMIN_DEFAULT_PASSWORD: admin             # Contraseña de acceso
      PGADMIN_CONFIG_SERVER_MODE: "False"         # Desactiva modo servidor
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"  # Simplifica acceso en desarrollo
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - local_network

volumes:
  evolution_v2_instances:
  minio_data:
  postgres_data:
  redis_data:
  pgadmin_data:


networks:
  local_network:
    driver: bridge
